resource_types:
  - name: helm-charts
    type: registry-image
    source:
      repository: registry.lab.verysmart.house/images/helm-charts-resource
      tag: "1"

resources:
  - name: chart-source
    type: git
    public: true
    icon: git
    source:
      uri: git@github.com:watchedsky-social/helm-chart.git
      private_key: ((helm-chart-deploy-private-key))
  - name: backend-image
    type: registry-image
    public: true
    icon: docker
    source:
      repository: registry.lab.verysmart.house/watchedsky/core
      username: ((harbor-user))
      password: ((harbor-password))
  - name: frontend-image
    type: registry-image
    public: true
    icon: docker
    source:
      repository: registry.lab.verysmart.house/watchedsky/frontend
      username: ((harbor-user))
      password: ((harbor-password))
  - name: feed-image
    type: registry-image
    public: true
    icon: docker
    source:
      repository: registry.lab.verysmart.house/watchedsky/feed
      username: ((harbor-user))
      password: ((harbor-password))
  - name: chart-image
    type: helm-charts
    public: true
    icon: kubernetes
    source:
      repo_url: oci://registry.lab.verysmart.house/watchedsky
      chart: application
      authentication:
        basic_auth:
          username: ((harbor-user))
          password: ((harbor-password))
  - name: helm-task-image
    type: registry-image
    public: true
    icon: docker
    check_every: 168h
    source:
      repository: registry.lab.verysmart.house/images/helm-tasks

jobs:
  - name: lint
    serial: true
    public: true
    plan:
      - in_parallel:
          - get: chart-source
            trigger: true
          - get: chart-image
            params:
              untar: true
          - get: helm-task-image
            params:
              format: rootfs
      - in_parallel:
          - task: lint-chart
            image: helm-task-image
            config:
              platform: linux
              inputs: [{name: chart-source, path: .}]
              run: {path: helm, args: [lint]}
          - task: verify-version
            image: helm-task-image
            config:
              platform: linux
              inputs:
                - name: chart-source
                - name: chart-image
              run:
                path: bash
                args:
                  - -ec
                  - |
                    pushd chart-source >/dev/null
                    changedFiles=($(git diff-tree --no-commit-id --name-only HEAD -r))
                    popd >/dev/null

                    set -x
                    checkVersion=0
                    for file in ${changedFiles[@]}; do
                      if [[ $file == templates/* ]] || [[ $file == "Chart.yaml" ]]; then
                        checkVersion=1
                        break
                      fi
                    done

                    if [[ $checkVersion == 0 ]]; then
                      exit 0
                    fi

                    oldVersion=$(yq '.version' chart-image/application/Chart.yaml)
                    newVersion=$(yq '.version' chart-source/Chart.yaml)

                    if ! semver-cli greater ${newVersion} ${oldVersion} ; then
                      echo "You must increase the version in Chart.yaml!" >&2
                      exit 1
                    fi
  - name: package
    serial: true
    public: true
    plan:
      - in_parallel:
          - get: chart-source
            trigger: true
            passed: [lint]
          - get: helm-task-image
            trigger: true
            passed: [lint]
            params:
              format: rootfs
      - task: package
        image: helm-task-image
        config:
          platform: linux
          inputs:
            - name: chart-source
          outputs:
            - name: packaged-charts
          run:
            path: bash
            args:
              - -ec
              - |
                helm package ./chart-source --destination ./packaged-charts
      - put: chart-image
        params:
          location: packaged-charts
  - name: tag-images
    serial: true
    public: true
    plan:
      - in_parallel:
          - get: chart-source
            trigger: true
            passed: [package]
          - get: helm-task-image
            trigger: true
            passed: [package]
            params:
              format: rootfs
          - get: backend-image
            params:
              format: oci
          - get: frontend-image
            params:
              format: oci
          - get: feed-image
            params:
              format: oci
      - load_var: version
        file: chart-source/Chart.yaml
        reveal: true
        format: yaml
      - in_parallel:
          - put: backend-image
            params:
              image: backend-image/image.tar
              version: ((.:version.appVersion))
          - put: frontend-image
            params:
              image: frontend-image/image.tar
              version: ((.:version.appVersion))
          - put: feed-image
            params:
              image: feed-image/image.tar
              version: ((.:version.appVersion))
          - set_pipeline: deploy-chart
            file: chart-source/ci/deploy-pipeline.yaml
            var_files:
              - chart-source/Chart.yaml
  - name: trigger-deploy
    serial: true
    public: true
    plan:
      - in_parallel:
          - get: chart-source
            trigger: true
            passed: [tag-images]
          - get: helm-task-image
            trigger: true
            passed: [tag-images]
            params:
              format: rootfs
      - task: trigger-deploy
        image: helm-task-image
        config:
          platform: linux
          run:
            path: bash
            args:
              - -ec
              - |
                sleep 2 # Allow the set-pipeline from the previous job to take effect
                curl -X POST https://ci.watchedsky.social/api/v1/teams/main/pipelines/deploy-chart/resources/webhook-trigger/check/webhook?webhook_token=((deploy-webhook-secret))

